// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now()) @map(name: "created_at")
  updatedAt     DateTime       @default(now()) @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  commentvotes  CommentVote[]
  votes         Vote[]
  subscriptions Subscription[]
  subreddits    Subreddit[]

  @@map(name: "users")
}

model Subreddit {
  id          String         @id @default(cuid())
  name        String         @unique
  createdAt   DateTime       @default(now()) @map(name: "created_at")
  updatedAt   DateTime       @default(now()) @map(name: "updated_at")
  posts       Post[]
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscribers Subscription[]

  @@map(name: "subreddits")
}

model Subscription {
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  subredditId String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)

  @@id([userId, subredditId])
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   Json?
  published Boolean   @default(false)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  comments  Comment[]
  votes     Vote[]

  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model Comment {
  id        String        @id @default(cuid())
  text      String
  authorId  String
  author    User          @relation(fields: [authorId], references: [id])
  postId    String
  post      Post          @relation(fields: [postId], references: [id])
  replyToId String?
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]
  createdAt DateTime      @default(now()) @map(name: "created_at")
  updatedAt DateTime      @default(now()) @map(name: "updated_at")
  commentId String?

  @@map(name: "comments")
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posttId String
  post    Post     @relation(fields: [posttId], references: [id], onDelete: Cascade)
  type    VoteType

  @@id([userId, posttId])
  @@map("votes")
}

model CommentVote {
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  type      VoteType

  @@id([userId, commentId])
  @@map("commentvotes")
}
